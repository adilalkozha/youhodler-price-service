version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bitcoin-price-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: bitcoin_price_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d bitcoin_price_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bitcoin-price-network

  # Redis (optional - for future caching if needed)
  redis:
    image: redis:7-alpine
    container_name: bitcoin-price-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bitcoin-price-network

  # Bitcoin Price Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: bitcoin-price-service
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      UPDATE_INTERVAL: 10000
      SERVICE_COMMISSION: 0.0001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: bitcoin_price_db
      DB_USERNAME: postgres
      DB_PASSWORD: password
      BINANCE_BASE_URL: https://api.binance.com
      BINANCE_SYMBOL: BTCUSDT
      LOG_LEVEL: info
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }).on('error', () => process.exit(1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - bitcoin-price-network
    volumes:
      - app_logs:/app/logs

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: bitcoin-price-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - bitcoin-price-network

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: bitcoin-price-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - bitcoin-price-network

networks:
  bitcoin-price-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local